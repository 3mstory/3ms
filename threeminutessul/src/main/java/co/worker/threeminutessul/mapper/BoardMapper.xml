<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="board">
	
	<select id="boardList" resultType="co.worker.threeminutessul.board.model.BoardVO" parameterType="searchVo">
		select
			b.boardSeq,
			b.title,
			b.writer,
			ui.userid,
			ui.nickname,
			ui.userSeq as writer,
			case 
				when updatedate = regdate then to_char(regdate,'YYYY-MM-DD hh24:mi:ss') 
				else to_char(updatedate,'YYYY-MM-DD HH24:mi:ss')
			end as regdate,
			case 
				when now() - updatedate <![CDATA[<]]> interval '1 minute' then extract ('epoch' from (now() - updatedate)::interval)::integer||'초 전'
				when now() - updatedate <![CDATA[<]]> interval '1 hour' then extract ('epoch' from (now() - updatedate)::interval)::integer/60||'분 전'
				else NULL::text
			end timechange,
			ui.profile,
			b.isanony
		from tblBoard b
			inner join tblUserInfo ui on b.writer = ui.userSeq
		
		where 1=1
		<if test="category != null">
			and b.category = #{category}
		</if>
		<if test="(searchtext != null and searchoption != null)">
			<!-- 검색상태임 -->
			<if test="searchoption == 0"> <!-- 전체검색(title, content, userid(닉네임)  -->
				and ( b.title ilike ${searchtext} or b.content ilike ${searchtext} or ui.nickname ilike ${searchtext} )
			</if>
			<if test="searchoption == 1"> <!-- title -->
				and b.title ilike ${searchtext}
			</if>
			<if test="searchoption == 2"><!-- content -->
			 	and b.content ilike ${searchtext}
			</if>
			
			<if test="searchoption == 3"><!-- 닉네임(userid) -->
				and ui.nickname ilike ${searchtext}
			</if>
		</if>
		order by b.boardSeq desc
		offset (#{page}-1)*10
		limit 10
	</select>
	
	<insert id="insertBoard" parameterType="boardVo">
		insert into tblBoard(writer,title,content,regdate,updatedate,likey,hate,isanony, category) 
		values(
			#{writer}, #{title}, #{contents}, now(), now(), #{likey}, #{hate}, #{isanony}, #{category}	
		)
	</insert>
	
	<select id="getLikeHate" parameterType="likehatevo" resultType="java.util.HashMap">
		select 
			coalesce(sum(isLike)::integer,0) as like, 
			coalesce(sum(isHate)::integer,0) as hate,
			(select count(*) from tblLikeHate where userSeq = #{userSeq} and boardSeq = #{boardSeq})::integer as isMyClicked,--접속한유저가 그글에서 좋아요 싫어요를 눌렀는지 여부
			(select case when isLike = 1 then 'clicklike' else 'clickhate' end 
			 from tblLikeHate where userSeq = #{userSeq} and boardSeq = #{boardSeq}) as isLikeHate
		from tblLikeHate 
		where boardSeq = #{boardSeq}
		  and (isLike=1
		  or isHate=1)
	</select>
	
	<select id="getBoardContent" parameterType="Integer" resultType="String">
		select content
		from tblBoard
		where boardSeq = #{boardSeq}
	</select>
	
	<select id="getBoard" parameterType="Integer" resultType="boardVo">
		select boardSeq, title, content contents from tblboard where boardSeq = #{boardSeq}
	</select>
	
	<update id="updateBoard" parameterType="boardVo">
		update tblboard set title = #{title}, content = #{contents}, updatedate = now() where boardSeq = #{boardSeq}
	</update>
	
	<select id="getAllCategoryList" resultType="categoryVo">
		select * from tblcategory
	</select>
	
	<delete id="boardDelete">
		delete from tblboard where boardSeq = #{boardSeq}
	</delete>
	
</mapper>

